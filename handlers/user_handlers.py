from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart
from aiogram.enums.chat_member_status import ChatMemberStatus

import database as db
from keyboards.inline import create_pagination_keyboard

router = Router()
user_search_results = {}

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    text = (
        "üéÅ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤\n"
        "/random - 30 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n"
        "‚ù§Ô∏è –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –æ—Ç mvpcrazy\n"
        "üßë‚Äçüíª –§–æ—Ä—É–º - https://lolz.live/members/3478629/"
    )
    await message.answer(text, disable_web_page_preview=True)

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(query: types.CallbackQuery, bot: Bot):
    channel_username = await db.get_subscription_channel()
    if not channel_username:
        await query.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_alert=True)
        return

    try:
        member = await bot.get_chat_member(chat_id=channel_username, user_id=query.from_user.id)
        if member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]:
            await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
            await query.message.delete()
        else:
            await query.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", show_alert=True)
    except Exception:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data.startswith("result_page_"))
async def result_pagination_handler(query: types.CallbackQuery):
    chat_id = query.message.chat.id
    if chat_id not in user_search_results:
        await query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
        return

    page = int(query.data.split("_")[2])
    pages = user_search_results[chat_id]

    if 0 <= page < len(pages):
        keyboard = create_pagination_keyboard(current_page=page, total_pages=len(pages), prefix="result_page")
        await query.message.edit_text(pages[page], reply_markup=keyboard, disable_web_page_preview=True)

    await query.answer()

@router.callback_query(F.data == "noop")
async def noop_callback(query: types.CallbackQuery):
    await query.answer()