import asyncio
import aiohttp
from aiogram import Router, types
from aiogram.filters import Command

from filters.admin import IsAdminFilter
import database as db
from services.proxy_manager import proxy_manager

router = Router()
router.message.filter(IsAdminFilter())


async def check_proxy(session: aiohttp.ClientSession, proxy_str: str) -> bool:
    proxy_url = None
    try:
        if "://" in proxy_str:
            proxy_url = proxy_str
        else:
            ip, port, login, password = proxy_str.split(":")
            proxy_url = f"socks5://{login}:{password}@{ip}:{port}"

        async with session.get("https://api.ipify.org?format=json", proxy=proxy_url, timeout=10) as response:
            return response.status == 200 and await response.json()
    except Exception:
        return False


@router.message(Command("admin"))
async def cmd_admin_panel(message: types.Message):
    text = (
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:</b>\n"
        "<code>/block ID</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<code>/unblock ID</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
        "<code>/blacklist @user</code> - –¥–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ –ß–° –ø–æ–∏—Å–∫–∞\n"
        "<code>/unblacklist @user</code> - —É–±—Ä–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ –ß–°\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º:</b>\n"
        "<code>/setchannel @username</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "<code>/delchannel</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "<code>/channelstatus</code> - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:</b>\n"
        "<code>/addproxy proxy</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "<code>/delproxy proxy</code> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "<code>/listproxies</code> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏\n"
        "<code>/checkproxies</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"
    )
    await message.answer(text)


@router.message(Command("checkproxies"))
async def cmd_check_proxies(message: types.Message):
    proxies = await db.get_all_proxies()
    if not proxies:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
        return

    status_message = await message.answer(
        f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(proxies)} –ø—Ä–æ–∫—Å–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    working_proxies = []
    failed_proxies = []

    async with aiohttp.ClientSession() as session:
        tasks = [check_proxy(session, p) for p in proxies]
        results = await asyncio.gather(*tasks)

    for proxy, is_working in zip(proxies, results):
        if is_working:
            working_proxies.append(proxy)
        else:
            failed_proxies.append(proxy)

    text = f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    text += f"üü¢ <b>–†–∞–±–æ—Ç–∞—é—Ç ({len(working_proxies)}):</b>\n"
    text += "\n".join([f"<code>{p.replace('<', '&lt;').replace('>', '&gt;')}</code>" for p in
                       working_proxies]) or "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏."
    text += f"\n\nüî¥ <b>–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç ({len(failed_proxies)}):</b>\n"
    text += "\n".join([f"<code>{p.replace('<', '&lt;').replace('>', '&gt;')}</code>" for p in
                       failed_proxies]) or "–í—Å–µ –ø—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–±–æ—Ç–∞—é—Ç."

    await status_message.edit_text(text)


@router.message(Command("block"))
async def cmd_block_user(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
        await db.block_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /block ID")


@router.message(Command("unblock"))
async def cmd_unblock_user(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
        await db.unblock_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /unblock ID")


@router.message(Command("blacklist"))
async def cmd_blacklist_user(message: types.Message):
    try:
        username = message.text.split()[1]
        if not username.startswith("@"): raise ValueError()
        await db.add_to_blacklist(username)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{username}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–∞.")
    except (IndexError, ValueError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /blacklist @username")


@router.message(Command("unblacklist"))
async def cmd_unblacklist_user(message: types.Message):
    try:
        username = message.text.split()[1]
        if not username.startswith("@"): raise ValueError()
        await db.remove_from_blacklist(username)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{username}</code> —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞.")
    except (IndexError, ValueError):
        await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /unblacklist @username")


@router.message(Command("setchannel"))
async def cmd_set_channel(message: types.Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].startswith("@"):
        await message.answer("‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setchannel @username")
        return

    channel = args[1]
    await db.set_subscription_channel(channel)
    await message.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel}")


@router.message(Command("delchannel"))
async def cmd_del_channel(message: types.Message):
    await db.set_subscription_channel(None)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@router.message(Command("channelstatus"))
async def cmd_channel_status(message: types.Message):
    channel = await db.get_subscription_channel()
    if channel:
        await message.answer(f"‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
    else:
        await message.answer("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@router.message(Command("addproxy"))
async def cmd_add_proxy(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addproxy proxy_string")
        return

    proxy_str = args[1]
    if await db.add_proxy(proxy_str):
        await proxy_manager.load_proxies()
        await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ `{proxy_str}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ `{proxy_str}`. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


@router.message(Command("delproxy"))
async def cmd_del_proxy(message: types.Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delproxy proxy_string")
        return

    proxy_str = args[1]
    if await db.delete_proxy(proxy_str):
        await proxy_manager.load_proxies()
        await message.answer(f"‚úÖ –ü—Ä–æ–∫—Å–∏ `{proxy_str}` —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∫—Å–∏ `{proxy_str}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


@router.message(Command("listproxies"))
async def cmd_list_proxies(message: types.Message):
    proxies = await db.get_all_proxies()
    if not proxies:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç.")
        return

    text = "<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏:</b>\n\n"
    text += "\n".join([f"<code>{p.replace('<', '&lt;').replace('>', '&gt;')}</code>" for p in proxies])
    await message.answer(text)